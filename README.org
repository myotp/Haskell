* Github
git clone git@github.com:wj2016/Haskell.git

* Learn You a Haskell for Great Good
** Download website
#+BEGIN_SRC sh
wget \
     --recursive \
     --no-clobber \
     --page-requisites \
     --html-extension \
     --convert-links \
     --domains learnyouahaskell.com \
     --no-parent \
     http://learnyouahaskell.com/chapters
#+END_SRC

** Basic workflow
#+BEGIN_SRC sh
ls demo.hs
ghci
:l demo
myDouble 5
:r
doubleSmallNumber 7
#+END_SRC

** Some simple stuff Chapter[Starting Out]
#+BEGIN_SRC sh
2 + 15
5 * 100
5 / 2

True && False
True || False
not False

5 == 5
1 == 0
5 /= 5
5 /= 4
"Hello" == "Hello"

succ 99
min 9 10
max 8 100
#+END_SRC

** List and Tuples
#+BEGIN_SRC sh
let myList = [1,2,3]
myList
sum myList

## string is just a list of characters
"hello" == ['h', 'e', 'l', 'l', 'o']
"hello" ++ "world"
0:[1,2,3]                                  -- [0 | [1,2,3]]
[1,2,3,4] !! 3

head [1,2,3]
tail [1,2,3]
last [1,2,3]
init [1,2,3]
length [1,2,3]
null [1,2,3]                               -- check if a list is empty
null []
reverse [1,2,3]
take 2 [1..10]
drop 2 [1..10]
maximum [1..10]
minimum [1..10]
sum [1..10]
product [1..10]
elem 5 [1..10]
[2,4..20]
[2,4..21]

take 50 (cycle [1..10])
take 5 (repeat 3)
replicate 5 3

## List Comprehension
[x*2 | x<-[1..10]]
[x*2 | x<-[1..10], x >= 5]

## Tuples
(1,2,3)
fst (1,2)
snd (1,2)
zip [1,2,3] ["one", "two", "three"]
zip [1..100] ["one", "two", "three"]
#+END_SRC
** Type
#+BEGIN_SRC sh
:t 'a'     -- Char
:t "Hello" -- [Char]
:t 100     -- Num a => a
:t head    -- [a] -> a
:t fst     -- (a, b) -> a
:t max     -- Ord a => a -> a -> a
:t []      -- [t]
:t (==)    -- Eq a => a -> a -> Bool
:t (+)     -- Num a => a -> a -> a
:t compare -- Ord a => a -> a -> Ordering
#+END_SRC

## type annotations
#+BEGIN_SRC sh
read "5"            -- Error
read "5" :: Int     -- OK
read "5" :: Float   -- OK2
read "(3, 'A')" :: (Int, Char)
#+END_SRC

* Parallel Haskell
** Basics
ghci
let x = 1 + 2 :: Int
x
:sprint x

let y = 1 + 2 :: Int
:sprint y

let x = 1 + 2 :: Int
let y = x + 1
:sprint x
:sprint y
## Evaluate y with seq
seq y ()
:sprint x
:sprint y

## What is seq?
let abc = 1 + 2
seq abc 88

## Add some data structure
let x = 1 + 2 :: Int
import Data.Tuple
let z = swap (x, x+1)
:sprint z
seq z ()
:sprint z
seq x ()
:sprint z

## What is Data.Tuple.swap
Data.Tuple.swap (1,2)
** map
:l pfp
map0 (\x -> x + 1) [1,2,3]
map1 (\x -> x + 1) [1,2,3]

let xs0 = map0 (+1) [1..10] :: [Int]
:sprint xs0

let xs = map1 (+1) [1..10] :: [Int]
:sprint xs

seq xs ()
:sprint xs

length xs
:sprint xs

sum xs
:sprint xs

** Sample Code
cabal unpack parconc-examples
cd parconc-examples-*
cabal install --only-dependencies
cabal build

** rpar.hs
ghc -O2 rpar.hs -threaded
./rpar 1 +RTS -N1
./rpar 1 +RTS -N2

./rpar 2 +RTS -N1
./rpar 2 +RTS -N2

./rpar 4 +RTS -N2

** Sudoku
cd Sudoku
ghc -O2 sudoku1.hs -rtsopts
./sudoku1 sudoku17.1000.txt
./sudoku1 sudoku17.1000.txt +RTS -s

ghc -O2 sudoku2.hs -rtsopts -threaded
./sudoku2 sudoku17.1000.txt +RTS -N2 -s

rm sudoku2
ghc -O2 sudoku2.hs -rtsopts -threaded -eventlog
./sudoku2 sudoku17.1000.txt +RTS -N2 -l

ghc -O2 sudoku3.hs -rtsopts -threaded -eventlog
./sudoku3 sudoku17.1000.txt +RTS -N2 -l

## Start ThreadScope from DMG file
## Open sudokuX.eventlog
## Export Image
** Install Threadscope
brew install glib cairo gtk gettext fontconfig

wget http://download.savannah.gnu.org/releases/freetype/freetype-2.5.3.tar.gz
tar -xzvf freetype-2.5.3.tar.gz
cd freetype-2.5.3
./configure
make
make install

## Run this in XQuartz xterm
gtk-demo

cabal install gtk2hs-buildtools
export PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig
brew tap homebrew/versions
brew install gcc48
cabal install --with-gcc=gcc-4.8 gtk
